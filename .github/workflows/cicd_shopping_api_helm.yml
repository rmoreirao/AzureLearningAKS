name: Build and deploy API - Helm
on:
  push:
    branches: [ "main" ]
    paths: 
      - 'Shopping/Shopping.API/**'
      - 'aks/shoppingapi.yaml'
      
  workflow_dispatch:

env:
  environment: 'prod'
  rgName: rg-shoppingwebapprmoreirao-prod-${{ secrets.LOCATION_SUFFIX }}
  AKS_CLUSTER_NAME: aks-shoppingrmoreirao-prod-${{ secrets.LOCATION_SUFFIX }}
  AZURE_CONTAINER_REGISTRY: acrshoppingrmoreiraowe

jobs:
  
  build:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3

        # - name: setup kubelogin for non-interactive login
        #   shell: bash
        #   run: |
        #     curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.9/kubelogin-linux-amd64.zip
        #     sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
        #     rm -f kubelogin-linux-amd64.zip
        #     kubelogin --version

        - name: Log in with Azure
          uses: Azure/login@v1
          with:
            # CLIENT_ID = Client ID of Service  Principal
            # CLIENT_SECRET = Password created for this specific connection - this can further enhanced
            creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

        - name: Build Shopping API docker image and push to ACR
          working-directory: Shopping
          run:  az acr build --image shopping/shopping-api:${{ github.sha }}  --registry acrshoppingrmoreiraowe --build-arg build_version=${{ github.sha }} --file Shopping.API/Dockerfile .

        - name: Set up kubelogin for non-interactive login
          run: |
            curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.9/kubelogin-linux-amd64.zip
            sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
            rm -f kubelogin-linux-amd64.zip
            kubelogin --version


        # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
        - name: Get K8s context
          uses: azure/aks-set-context@v3
          with:
            # Non-interactive login: https://github.com/Azure/k8s-deploy/issues/239
            # And here: https://github.com/Azure/aks-set-context#kubelogin
            admin: 'true'
            use-kubelogin: 'true'
            resource-group: ${{ env.rgName }}
            cluster-name: ${{ env.AKS_CLUSTER_NAME }}

        - name: Install kubelogin
          run: kubelogin --version

        # Runs Helm to create manifest files
        - name: Bake deployment
          uses: azure/k8s-bake@v2
          with:
            renderEngine: "helm"
            silent: 'false'
            arguments: |
              --debug
            helmChart: './aks-helm/shoppingapi/'
            overrides: |
              db.user:root
              db.password:example
              db.user_base64:cm9vdA==
              db.password_base64:ZXhhbXBsZQ==
            helm-version: "latest"
          id: bake

        - uses: actions/upload-artifact@v3
          with:
            name: aks-manifest
            path: ${{ steps.bake.outputs.manifestsBundle }}

        - name: Deploy to k8s
          uses: Azure/k8s-deploy@v4
          with:
            action: deploy
            force: true
            manifests: |
              ${{ steps.bake.outputs.manifestsBundle }}
            images: |
              ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/shopping/shopping-api:${{ github.sha }}
  
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   permissions:
  #     id-token: write
  #     contents: read
  #     actions: read

  #   steps:
  #       - uses: actions/checkout@v3

  #       - name: Log in with Azure
  #         uses: Azure/login@v1
  #         with:
  #           # CLIENT_ID = Client ID of Service  Principal
  #           # CLIENT_SECRET = Password created for this specific connection - this can further enhanced
  #           creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'


         